// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Domain.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Domain.Models
{
    public partial class ExamsContext
    {
        private IExamsContextProcedures _procedures;

        public virtual IExamsContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new ExamsContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IExamsContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<USP_Query_CustomerResult>().HasNoKey().ToView(null);
        }
    }

    public partial class ExamsContextProcedures : IExamsContextProcedures
    {
        private readonly ExamsContext _context;

        public ExamsContextProcedures(ExamsContext context)
        {
            _context = context;
        }

        public virtual async Task<List<USP_Query_CustomerResult>> USP_Query_CustomerAsync(string name, string status, int? Skip, int? Take, string SortBy, string SortDirection, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 255,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = -1,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Skip",
                    Value = Skip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Take",
                    Value = Take ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortBy",
                    Size = 50,
                    Value = SortBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortDirection",
                    Size = 4,
                    Value = SortDirection ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_Query_CustomerResult>("EXEC @returnValue = [dbo].[USP_Query_Customer] @name, @status, @Skip, @Take, @SortBy, @SortDirection", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
